{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["operators","App","useState","displayInput","setDisplayInput","displayInput2","setDisplayInput2","result","setResult","stateEqual","setStateEqual","statePercent","setStatePercent","fixedNum","num","Number","toFixed","cheackIsOperatorLast","isOperator","forEach","operator","lastIndex","length","check","checkDoteInInput","console","log","arrDisplay","split","cell","useEffect","isOperatorLast","resultCode","eval","numFix","printNumber","operatorCalc","percent","deletedLastOperator","slice","resultFixed","percentResult","percentResultFixed","dote","checkDoteinFullInput","remove","reset","equal","className","id","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d42d8745.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nconst operators = ['+', '-', '*', '/'];\n\nfunction App() {\n  const [displayInput, setDisplayInput] = useState('0');\n  const [displayInput2, setDisplayInput2] = useState('');\n  const [result, setResult] = useState(0);\n  const [stateEqual, setStateEqual] = useState(false);\n  const [statePercent, setStatePercent] = useState(false);\n\n  const fixedNum = (num) => {\n    return Number(num.toFixed(2));\n  };\n\n  const cheackIsOperatorLast = () => {\n    let isOperator = false;\n    operators.forEach((operator) => {\n      const lastIndex = displayInput.length - 1;\n\n      let check = displayInput[lastIndex] === operator;\n      if (check) {\n        isOperator = check;\n      }\n    });\n\n    return isOperator;\n  };\n\n  const checkDoteInInput = () => {\n    let isOperator = false;\n    const dote = '.';\n    console.log('displayInput', displayInput);\n    const arrDisplay = displayInput.split('');\n    console.log('displayInput', displayInput, typeof displayInput);\n    arrDisplay.forEach((cell) => {\n      let check = cell === dote;\n      if (check) {\n        isOperator = check;\n      }\n    });\n\n    return isOperator;\n  };\n\n  useEffect(() => {\n    const isOperatorLast = cheackIsOperatorLast();\n    let resultCode;\n\n    if (!isOperatorLast) {\n      eval(`resultCode = ${displayInput2} ${displayInput}`);\n\n      const numFix = fixedNum(resultCode);\n      setResult(numFix);\n    }\n  }, [displayInput, displayInput2]);\n\n  const printNumber = (num) => {\n    if (statePercent) {\n      return;\n    }\n\n    if (stateEqual) {\n      setDisplayInput(num);\n      setDisplayInput2('');\n      setStateEqual(false);\n      return;\n    }\n\n    if (displayInput === '0') {\n      return setDisplayInput(`${num}`);\n    }\n    const isOperatorLast = cheackIsOperatorLast();\n    if (isOperatorLast) {\n      setDisplayInput2(`${displayInput2} ${displayInput}`);\n      setDisplayInput(num);\n    } else {\n      setDisplayInput(`${displayInput}${num}`);\n    }\n  };\n\n  const operatorCalc = (operator) => {\n    const isOperatorLast = cheackIsOperatorLast();\n    setStateEqual(false);\n\n    if (isOperatorLast) {\n      setDisplayInput(operator);\n    } else {\n      setDisplayInput2(`${displayInput2} ${displayInput}`);\n      setDisplayInput(operator);\n    }\n  };\n\n  const percent = () => {\n    const isOperatorLast = cheackIsOperatorLast();\n    setStateEqual(false);\n\n    if (!isOperatorLast && displayInput2) {\n      setStateEqual(false);\n      setStatePercent(true);\n      const deletedLastOperator = displayInput2.slice(0, displayInput2.length - 2);\n      let resultCode;\n      eval(`resultCode = ${deletedLastOperator}`);\n\n      const resultFixed = fixedNum(resultCode);\n      const percentResult = (resultFixed / 100) * displayInput;\n      const percentResultFixed = fixedNum(percentResult);\n      setDisplayInput(percentResultFixed);\n    }\n  };\n\n  const dote = () => {\n    if (stateEqual || statePercent) {\n      setStateEqual(false);\n      return setDisplayInput('0.');\n    }\n    const isOperatorLast = cheackIsOperatorLast();\n    if (!isOperatorLast && !stateEqual) {\n      if (displayInput === '0') {\n        console.log('work111');\n        setDisplayInput('0.');\n      } else {\n        const lastIndex = displayInput.length - 1;\n        let checkDoteInTheEnd = displayInput[lastIndex] === '.';\n\n        if (!checkDoteInTheEnd) {\n          const checkDoteinFullInput = checkDoteInInput();\n\n          if (checkDoteinFullInput) {\n            setDisplayInput(`${displayInput}`);\n          } else {\n            setDisplayInput(`${displayInput}.`);\n          }\n        }\n      }\n\n      setStateEqual(false);\n    } else {\n    }\n  };\n\n  const remove = () => {\n    setDisplayInput('0');\n    setStateEqual(false);\n  };\n\n  const reset = () => {\n    setDisplayInput('0');\n    setDisplayInput2('');\n    setStateEqual(false);\n  };\n\n  const equal = () => {\n    setDisplayInput(result);\n    setDisplayInput2('');\n    setStateEqual(true);\n  };\n\n  return (\n    <div className=\"app\">\n      <header id=\"header\">\n        <div>Calcuator</div>\n      </header>\n      <main id=\"main\">\n        <div className=\"calculate\">\n          <div className=\"row center\">\n            <div className=\"display\">\n              <div className=\"top\">{`${displayInput2} ${displayInput}`}</div>\n              <div className=\"bottom\">{result}</div>\n            </div>\n          </div>\n          <div className=\"key-bord row\">\n            <div className=\"item2\" onClick={reset}>\n              AC\n            </div>\n            <div className=\"item1\" onClick={remove}>\n              del\n            </div>\n            <div className=\"item3\" onClick={percent}>\n              %\n            </div>\n            <div className=\"item4\" onClick={() => operatorCalc('/')}>\n              /\n            </div>\n\n            <div className=\"item\" onClick={() => printNumber('7')}>\n              7\n            </div>\n            <div className=\"item\" onClick={() => printNumber('8')}>\n              8\n            </div>\n            <div className=\"item\" onClick={() => printNumber('9')}>\n              9\n            </div>\n            <div className=\"item\" onClick={() => operatorCalc('*')}>\n              *\n            </div>\n\n            <div className=\"item\" onClick={() => printNumber('4')}>\n              4\n            </div>\n            <div className=\"item\" onClick={() => printNumber('5')}>\n              5\n            </div>\n            <div className=\"item\" onClick={() => printNumber('6')}>\n              6\n            </div>\n            <div className=\"item\" onClick={() => operatorCalc('-')}>\n              -\n            </div>\n\n            <div className=\"item\" onClick={() => printNumber('1')}>\n              1\n            </div>\n            <div className=\"item\" onClick={() => printNumber('2')}>\n              2\n            </div>\n            <div className=\"item\" onClick={() => printNumber('3')}>\n              3\n            </div>\n            <div className=\"item\" onClick={() => operatorCalc('+')}>\n              +\n            </div>\n            <div className=\"item\" onClick={dote}>\n              .\n            </div>\n            <div className=\"item\" onClick={() => printNumber('0')}>\n              0\n            </div>\n            <div className=\"big\" onClick={equal}>\n              =\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}